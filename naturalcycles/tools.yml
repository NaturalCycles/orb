#
# circleci orb validate naturalcycles/tools.yml && circleci orb publish increment naturalcycles/tools.yml naturalcycles/tools patch
#
version: 2.1
description: Orb for generic (not NC-internal) things.

executors:
  node:
    docker:
      - image: naturalcycles/ci-node:latest
    working_directory: ~/repo

  node-gcloud:
    docker:
      - image: naturalcycles/ci-node-gcloud:latest
    working_directory: ~/repo

jobs:
  build-job:
    executor: node
    steps:
      - setup_node

      # build
      - run: yarn build

      # lint-all (withou --commitOnChanges)
      - run: yarn lint-all

      - job_end

  lint-job:
    executor: node
    steps:
      - setup_node

      # lint-all
      - run: yarn lint-all --commitOnChanges
      # todo: --commitOnChanges and --failOnChanges as boolean parameters

      - job_end

  release-job:
    description: Runs `yarn release`
    executor: node
    steps:
      - setup_node

      # release
      - release

      - job_end

  publish-job:
    executor: node
    steps:
      - setup_node

      # build
      - run: yarn build-prod

      # release
      - release

      - job_end

  test-job:
    parameters:
      CC_TEST_REPORTER_ID:
        type: string
        default: ""
    executor: node
    environment:
      CC_TEST_REPORTER_ID: << parameters.CC_TEST_REPORTER_ID >>
    steps:
      - setup_node

      # build
      - run: yarn build

      # test
      - test_ci

      - store_test_artifacts
      - job_end

  test-leaks-job:
    executor: node
    steps:
      - setup_node

      # test
      - run:
          name: test-leaks
          command: |
            yarn add -D patch-package weak-napi
            yarn patch-package
            # poor man's retry
            yarn test-leaks || yarn test-leaks || yarn test-leaks

      - store_test_artifacts
      - job_end

  nightly-job:
    executor: node
    steps:
      - checkout

      # yarn (no cache)
      - run: yarn --no-lockfile

      - run: yarn build
      - run: yarn test-ci

      - store_test_artifacts
      - job_end

  deploy-gae-job:
    executor: node-gcloud
    steps:
      - setup_node

      - run:
          name: gcloud auth
          command: |
            gcloud version

            GCP_SERVICE_ACCOUNT_BY_BRANCH=`echo GCP_SERVICE_ACCOUNT_${CIRCLE_BRANCH} | tr a-z A-Z`

            if [ "${!GCP_SERVICE_ACCOUNT_BY_BRANCH}" ]; then
              echo ${!GCP_SERVICE_ACCOUNT_BY_BRANCH} | gcloud auth activate-service-account --key-file=-
            else
              echo $GCP_SERVICE_ACCOUNT | gcloud auth activate-service-account --key-file=-
            fi

      - run: yarn deploy-gae --logs
      - job_end

  snyk-job:
    executor: node
    steps:
      - setup_node # just "checkout" would be enough, but "job_end" needs node_modules

      - run:
          name: snyk test
          command: |
            npm i -g snyk
            snyk config set api=$SNYK_TOKEN
            snyk test

      - job_end

  yarn-audit-job:
    executor: node
    steps:
      - setup_node # just "checkout" would be enough, but "job_end" needs node_modules

      - run:
          name: yarn audit
          command: |
            yarn audit

      - job_end

commands:
  setup_node:
    description: Performs usual initial steps for every node job
    parameters:
      cacheVersion:
        type: string
        default: "v1"
    steps:
      - checkout
      - npm_token
      - install_yarn_deps:
          cacheVersion: << parameters.cacheVersion >>

  npm_token:
    description: Saves env.NPM_TOKEN (if present) to ~/.npmrc file
    steps:
      - run:
          name: .npmrc
          command: |
            # Will write $NPM_TOKEN to ~/.npmrc (if defined)
            [ ! -z "$NPM_TOKEN" ] && echo -e "always-auth=true\n//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc || true

  install_yarn_deps:
    parameters:
      cacheVersion:
        type: string
        default: "v1"
    steps:
      - restore_cache_yarn:
          cacheVersion: << parameters.cacheVersion >>
      - run:
          name: yarn
          command: |
            yarn --frozen-lockfile
      - save_cache_yarn:
          cacheVersion: << parameters.cacheVersion >>

  restore_cache_yarn:
    parameters:
      cacheVersion:
        type: string
        default: "v1"
    steps:
      - restore_cache:
          key: deps-<< parameters.cacheVersion >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ arch }}-{{ checksum "yarn.lock" }}

  save_cache_yarn:
    parameters:
      cacheVersion:
        type: string
        default: "v1"
    steps:
      - save_cache:
          paths:
            - node_modules
          key: deps-<< parameters.cacheVersion >>-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ arch }}-{{ checksum "yarn.lock" }}

  release:
    steps:
      - run:
          name: Release (if needed)
          command: release

  test_ci:
    steps:
      - run:
          name: yarn test-ci
          command: |
            # Use `cc-test-reporter` only if env variable is set
            [ ! -z "$CC_TEST_REPORTER_ID" ] && echo "Will use CC $CC_TEST_REPORTER_ID" || echo "Will NOT use CC $CC_TEST_REPORTER_ID"
            [ -z "$CC_TEST_REPORTER_ID" ] || cc-test-reporter before-build
            yarn test-ci
            [ -z "$CC_TEST_REPORTER_ID" ] || cc-test-reporter after-build -t lcov

  store_test_artifacts:
    steps:
      - store_test_results:
          path: tmp/jest
      - store_artifacts:
          path: tmp/jest
          destination: jest
      - store_artifacts:
          path: coverage/lcov-report
          destination: coverage-unit
      - store_artifacts:
          path: tmp/coverage-integration/lcov-report
          destination: coverage-integration

  job_end:
    description: Allows to run onJobEnd.ts hook with --result success/fail. Also sends Slack message on failure if env.SLACK_ON_FAILURE_CHANNEL is defined (e.g \#alerts).
    steps:
      - run:
          name: On success
          command: |
            if [ -f ./scripts/onJobEnd.ts ]; then
                tsn onJobEnd.ts --result success
            fi

      - run:
          name: On failure
          when: on_fail
          command: |
            # todo: it needs more thought before enabling it by default
            #            if [ ! -z "${SLACK_WEBHOOK_URL}" ]; then
            #              if [ ! -z "${SLACK_ON_FAILURE_CHANNEL}" ]; then
            #                curl -X POST -H "Content-Type: application/json" -d "{\"channel\": \"${SLACK_ON_FAILURE_CHANNEL}\", \"text\": \"\`${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/${CIRCLE_JOB}\` <${CIRCLE_BUILD_URL}|failed>\", \"username\": \"bot\", \"icon_emoji\": \":fire:\"}" ${SLACK_WEBHOOK_URL}
            #              fi
            #            fi
            if [ -f ./scripts/onJobEnd.ts ]; then
                tsn onJobEnd.ts --result fail
            fi

  slack_on_failure:
    description: Sends a Slack message if Job fails. Needs env.SLACK_WEBHOOK_URL and `channel` parameter (defaults to `#ci-alerts`)
    parameters:
      channel:
        type: string
        default: "#ci-alerts"
      username:
        type: string
        default: bot
      icon_emoji:
        type: string
        default: ":fire:"
      branch:
        type: string
        default: "*"
    steps:
      - run:
          name: Slack on failure
          when: on_fail
          command: |
            [ -z "${SLACK_WEBHOOK_URL}" ] && echo "env.SLACK_WEBHOOK_URL is required!" && exit 1
            [[ "<< parameters.branch >>" != "*" && "<< parameters.branch >>" != "${CIRCLE_BRANCH}"  ]] && echo "Skipping notification for this branch" && exit 0
            curl -X POST -H "Content-Type: application/json" -d "{\"channel\": \"<< parameters.channel >>\", \"text\": \"\`${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/${CIRCLE_JOB}\` <${CIRCLE_BUILD_URL}|failed>\", \"username\": \"<< parameters.username >>\", \"icon_emoji\": \"<< parameters.icon_emoji >>\"}" ${SLACK_WEBHOOK_URL}

  slack_on_success:
    description: Sends a Slack message if Job succeeds (need to be placed in the end of the job). Needs env.SLACK_WEBHOOK_URL and `channel` parameter (defaults to `#ci-success`)
    parameters:
      channel:
        type: string
        default: "#ci-success"
      username:
        type: string
        default: bot
      icon_emoji:
        type: string
        default: ":white_check_mark:"
    steps:
      - run:
          name: Slack on success
          command: |
            [ -z "${SLACK_WEBHOOK_URL}" ] && echo "env.SLACK_WEBHOOK_URL is required!" && exit 1
            curl -X POST -H "Content-Type: application/json" -d "{\"channel\": \"<< parameters.channel >>\", \"text\": \"\`${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/${CIRCLE_JOB}\` <${CIRCLE_BUILD_URL}|completed>\", \"username\": \"<< parameters.username >>\", \"icon_emoji\": \"<< parameters.icon_emoji >>\"}" ${SLACK_WEBHOOK_URL}
